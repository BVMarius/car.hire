openapi: 3.0.1
info:
  description: Orchestrator for the Car Rental API flow, based on Java. Main entry point to the Car rental API.
  version: "1.0.0"
  title: Car Rental API
  contact:
    email: marius.moraru@live.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: http://localhost:{port}
    description: local environment
    variables:
      port:
        default: '8080'
tags:
  - name: user
    description: Endpoints related with user resources
  - name: fleet_management
    description: Endpoints related with car resources
  - name: rental
    description: Endpoints related with rental service resources
security:
  - oAuth:
      - write
      - read
paths:
  /user:
    post:
      tags:
        - user
      description: Creates an user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        description: Creates an user
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: CreateResponse
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
          description: Unauthorized
        '422':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityResponse"
          description: UnprocessableEntity
        '500':
          $ref: '#/components/responses/Unauthorized'
      summary: Creates an user
    get:
      tags:
        - user
      description: List all users
      operationId: listUsers
      summary: List all users
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
          description: List all users
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
          description: Unauthorized
        '422':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityResponse"
          description: UnprocessableEntity
        '500':
          $ref: '#/components/responses/Unauthorized'
  /user/{userId}:
    get:
      tags:
        - user
      description: Return a specific user by id
      summary: "Find user by ID"
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: List all users
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
          description: Unauthorized
        '422':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityResponse"
          description: UnprocessableEntity
        '500':
          $ref: '#/components/responses/Unauthorized'
    patch:
      tags:
        - user
      summary: Updates  a specific user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: "user that needs to be updated"
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        description: Creates an user
        required: true
      responses:
        '200':
          description: "Update successfull"
        '400':
          description: "Invalid user supplied"
        '404':
          description: "User not found"
        '422':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityResponse"
          description: UnprocessableEntity
    delete:
      tags:
        - user
      summary: Delete a user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The id of the user that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: "Resource deleted successfull"
        '400':
          description: "Invalid username supplied"
        '404':
          description: "User not found"
        '422':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityResponse"
          description: UnprocessableEntity
  /car:
    post:
      tags:
        - fleet_management
      description: Creates a car
      operationId: createCar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCarRequest'
        description: Creates a car
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: CreateResponse
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
          description: Unauthorized
        '422':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityResponse"
          description: UnprocessableEntity
        '500':
          $ref: '#/components/responses/Unauthorized'
      summary: Creates a car
  /car/car_entries:
    get:
      tags:
        - fleet_management
      description: List all cars
      operationId: listCars
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarResponse'
          description: List all users
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
          description: Unauthorized
        '422':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityResponse"
          description: UnprocessableEntity
        '500':
          $ref: '#/components/responses/Unauthorized'
  /car/{carId}:
    get:
      tags:
        - fleet_management
      description: Return a specific car by id
      summary: "Find car by ID"
      operationId: getCarById
      parameters:
        - name: carId
          in: path
          description: ID of car which will be returned
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarResponse'
          description: List all cars
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
          description: Unauthorized
        '422':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityResponse"
          description: UnprocessableEntity
        '500':
          $ref: '#/components/responses/Unauthorized'
    patch:
      tags:
        - fleet_management
      summary: Updates  a specific car
      description: This can only be done by the logged in user.
      operationId: updateCar
      parameters:
        - name: carId
          in: path
          description: "car that needs to be updated"
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCarRequest'
        description: Creates an user
        required: true
      responses:
        '200':
          description: "Update successfull"
        '400':
          description: "Invalid user supplied"
        '404':
          description: "User not found"
        '422':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityResponse"
          description: UnprocessableEntity
    delete:
      tags:
        - fleet_management
      summary: Delete a car
      description: This can only be done by the logged in user.
      operationId: deleteCar
      parameters:
        - name: carId
          in: path
          description: The id of the user that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: "Resource deleted successfull"
        '400':
          description: "Invalid username supplied"
        '404':
          description: "User not found"
        '422':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityResponse"
          description: UnprocessableEntity
  /rental:
    post:
      tags:
        - rental
      description: Creates a rental
      operationId: createRental
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRentalRequest'
        description: Creates an rental
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: CreateResponse
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
          description: Unauthorized
        '422':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityResponse"
          description: UnprocessableEntity
        '500':
          $ref: '#/components/responses/Unauthorized'
      summary: Creates an user
  /rental/rental_entries:
    get:
      tags:
        - rental
      description: List all rentals to date
      operationId: listRental
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RentalResponse'
          description: List all users
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
          description: Unauthorized
        '422':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityResponse"
          description: UnprocessableEntity
        '500':
          $ref: '#/components/responses/Unauthorized'
  /rental/{rentalId}:
    get:
      tags:
        - rental
      description: Return a specific rental by id
      summary: "Find rented car by ID"
      operationId: getRentalById
      parameters:
        - name: rentalId
          in: path
          description: ID of rental service to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: List all users
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
          description: Unauthorized
        '422':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityResponse"
          description: UnprocessableEntity
        '500':
          $ref: '#/components/responses/Unauthorized'
    patch:
      tags:
        - rental
      summary: Updates  a specific rental
      description: This can only be done by the logged in user.
      operationId: updateRental
      parameters:
        - name: rentalId
          in: path
          description: "user that needs to be updated"
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRentalRequest'
        description: Creates an user
        required: true
      responses:
        '200':
          description: "Update successfull"
        '400':
          description: "Invalid user supplied"
        '404':
          description: "User not found"
        '422':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityResponse"
          description: UnprocessableEntity
    delete:
      tags:
        - rental
      summary: Delete a car
      description: This can only be done by the logged in user.
      operationId: deleteRental
      parameters:
        - name: rentalId
          in: path
          description: The id of the user that needs to be deleted
          required: true
          schema:
            type: string
            format: int64
      responses:
        '204':
          description: "Resource deleted successfull"
        '400':
          description: "Invalid username supplied"
        '404':
          description: "User not found"
        '422':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityResponse"
          description: UnprocessableEntity

components:
  responses:
    Unauthorized:
      description: unauthorized response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UnauthorizedResponse'
    BadRequest:
      description: bad request
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ValidationDTO'
    ServerError:
      description: internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
  schemas:
    UnauthorizedResponse:
      description: The response when an user is not uthorized to access a specific resource.
      properties:
        message:
          description: The message to be displayed
          type: string
    CreateUserRequest:
      description: Create user details.
      properties:
        email:
          description: User's email
          type: string
        password:
          description: User's password
          type: string
        username:
          description: Username of the user
          type: string
        firstName:
          description: First name of the user
          type: string
        lastName:
          description: Last name of the user
          type: string
        country:
          description: Contry of residence for the user
          type: integer
        licese_number:
          description: License number
        status:
          description: User status
          enum:
            - ACTIVE
            - DELETED
    UserResponse:
      description: List user details.
      properties:
        id:
          description: User id
          type: integer
        email:
          description: User's email
          type: string
        username:
          description: Username of the user
          type: string
        firstName:
          description: First name of the user
          type: string
        lastName:
          description: Last name of the user
          type: string
        country:
          description: Contry of residence for the user
          type: string
        licese_number:
          description: License number
        status:
          description: User status
          enum:
            - ACTIVE
            - DELETED
    SuccessResponse:
      description: Success response when an user is created
      properties:
        id:
          description: User id
          type: integer
    ValidationDTO:
      type: object
      properties:
        code:
          type: string
        field:
          type: string
        description:
          type: string
    ErrorDTO:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    UnprocessableEntityResponse:
      description: "List of JSON-API spec compliant error response objects"
      properties:
        errors:
          description: "List of errors"
          items:
            "$ref": "#/components/schemas/ValidationError"
          type: array
      required:
        - errors
      type: object
    ValidationError:
      description: JSON-API spec compliant error response object
      properties:
        code:
          description: Code representing reason for error
          enum:
            - INVALID_CONSTRAINT
            - INVALID_FORMAT
            - INVALID_TYPE
            - INVALID_ENUM_VALUE
            - IN_USE
            - NOT_EDITABLE
            - REQUIRED
          type: string
        detail:
          description: Error detail
          nullable: true
          type: string
      title: ValidationError
      type: object
    CreateCarRequest:
      description: Create car details.
      properties:
        make:
          description: car's maker
          type: string
        model:
          description: model of the car
          type: string
        year:
          description: the year on which the car war build
          type: integer
        mileage:
          description: Number of kilometers that a car holds
          type: integer
        fuel:
          description: Fuel of the car
          enum:
            - GASOLINE
            - DIESEL
            - LIQUEFIED_NATURAL_GAS
            - HYBRID
            - ELECTRIC
        carClass:
          description: Car class
          enum:
            - COMPACT
            - EXECUTIVE
            - MINIVAN
            - SUV
        plateNumber:
          description: Plate number
          type: string
        status:
          description: Car status
          enum:
            - ACTIVE
            - DELETED
    CarResponse:
      properties:
        id:
          description: car id
          type: integer
        make:
          description: car's maker
          type: string
        model:
          description: model of the car
          type: string
        year:
          description: the year on which the car war build
          type: integer
        mileage:
          description: Number of kilometers that a car holds
          type: integer
        fuel:
          description: Fuel of the car
          enum:
            - GASOLINE
            - DIESEL
            - LIQUEFIED_NATURAL_GAS
            - HYBRID
            - ELECTRIC
        carClass:
          description: Car class
          enum:
            - COMPACT
            - EXECUTIVE
            - MINIVAN
            - SUV
        plateNumber:
          description: Plate number
          type: string
        status:
          description: Car status
          enum:
            - ACTIVE
            - DELETED
    CreateRentalRequest:
      properties:
        carId:
          description: car id
          type: integer
        userId:
          description: user id
          type: integer
        startDate:
          description: ISO 8601 format datetime representing starting time of dropoff slot
          format: date-time
          type: string
        endDate:
          description: ISO 8601 format datetime representing starting time of dropoff slot
          format: date-time
          type: string
        status:
          description: Car status
          enum:
            - ACTIVE
            - DELETED
    RentalResponse:
      properties:
        id:
          description: rental id
          type: integer
        carId:
          description: car id
          type: integer
        userId:
          description: user id
          type: integer
        startDate:
          description: ISO 8601 format datetime representing starting time of dropoff slot
          format: date-time
          type: string
        endDate:
          description: ISO 8601 format datetime representing starting time of dropoff slot
          format: date-time
          type: string
        status:
          description: Car status
          enum:
            - ACTIVE
            - DELETED
  securitySchemes:
    oAuth:
      type: oauth2
      description: This API uses OAuth2 with the password flow
      flows:
        password:
          tokenUrl: /oauth/token
          scopes:
            read: get information from the API
            write: use the API to make changes to the supporting data mode